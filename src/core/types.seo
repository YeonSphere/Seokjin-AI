# Types Module
# Core type definitions with zero-cost abstractions

# Basic numeric types
type i8(platform_specific::i8)
type i16(platform_specific::i16)
type i32(platform_specific::i32)
type i64(platform_specific::i64)
type u8(platform_specific::u8)
type u16(platform_specific::u16)
type u32(platform_specific::u32)
type u64(platform_specific::u64)
type f32(platform_specific::f32)
type f64(platform_specific::f64)
type usize(platform_specific::usize)
type isize(platform_specific::isize)

# String types
type str(platform_specific::str)
type String {
    ptr: *mut u8,
    len: usize,
    cap: usize
}

# Option type with zero overhead
type Option[T] {
    Some(T),
    None
}

# Result type with zero overhead
type Result[T, E] {
    Ok(T),
    Err(E)
}

# Range types with static dispatch
type Range[T] {
    start: T,
    end: T
}

type RangeInclusive[T] {
    start: T,
    end: T
}

# Slice types
type slice[T] {
    ptr: *const T,
    len: usize
}

type slice_mut[T] {
    ptr: *mut T,
    len: usize
}

# Array with compile-time size
type array[T, const N: usize] {
    data: [T; N]
}

# Vector types for graphics
type Vec2[T] {
    x: T,
    y: T
}

type Vec3[T] {
    x: T,
    y: T,
    z: T
}

type Vec4[T] {
    x: T,
    y: T,
    z: T,
    w: T
}

# Matrix types for graphics
type Mat2[T] {
    data: [[T; 2]; 2]
}

type Mat3[T] {
    data: [[T; 3]; 3]
}

type Mat4[T] {
    data: [[T; 4]; 4]
}

# Color types
type Color {
    r: u8,
    g: u8,
    b: u8,
    a: u8
}

# Common trait implementations
impl[T] Option[T] {
    # Map operation with zero overhead
    fn map[U](self, f: fn(T) -> U) -> Option[U] {
        match self {
            Option::Some(x) => Option::Some(f(x)),
            Option::None => Option::None
        }
    }

    # Unwrap with default
    fn unwrap_or(self, default: T) -> T {
        match self {
            Option::Some(x) => x,
            Option::None => default
        }
    }
}

impl[T, E] Result[T, E] {
    # Map operation with zero overhead
    fn map[U](self, f: fn(T) -> U) -> Result[U, E] {
        match self {
            Result::Ok(x) => Result::Ok(f(x)),
            Result::Err(e) => Result::Err(e)
        }
    }

    # Map error with zero overhead
    fn map_err[F](self, f: fn(E) -> F) -> Result[T, F] {
        match self {
            Result::Ok(x) => Result::Ok(x),
            Result::Err(e) => Result::Err(f(e))
        }
    }
}

impl[T: Copy] Vec2[T] {
    # Create new vector
    fn new(x: T, y: T) -> Self {
        Self { x, y }
    }

    # Add vectors with SIMD
    fn add(self, other: Self) -> Self {
        Self {
            x: self.x + other.x,
            y: self.y + other.y
        }
    }

    # Multiply by scalar with SIMD
    fn scale(self, scalar: T) -> Self {
        Self {
            x: self.x * scalar,
            y: self.y * scalar
        }
    }
}

impl[T: Copy] Vec3[T] {
    # Create new vector
    fn new(x: T, y: T, z: T) -> Self {
        Self { x, y, z }
    }

    # Add vectors with SIMD
    fn add(self, other: Self) -> Self {
        Self {
            x: self.x + other.x,
            y: self.y + other.y,
            z: self.z + other.z
        }
    }

    # Cross product with SIMD
    fn cross(self, other: Self) -> Self {
        Self {
            x: self.y * other.z - self.z * other.y,
            y: self.z * other.x - self.x * other.z,
            z: self.x * other.y - self.y * other.x
        }
    }
}

impl[T: Copy] Mat4[T] {
    # Create identity matrix
    fn identity() -> Self {
        let mut data = [[T::zero(); 4]; 4]
        data[0][0] = T::one()
        data[1][1] = T::one()
        data[2][2] = T::one()
        data[3][3] = T::one()
        Self { data }
    }

    # Matrix multiplication with SIMD
    fn mul(self, other: Self) -> Self {
        let mut result = [[T::zero(); 4]; 4]
        for i in 0..4 {
            for j in 0..4 {
                for k in 0..4 {
                    result[i][j] += self.data[i][k] * other.data[k][j]
                }
            }
        }
        Self { data: result }
    }
}

# Tests module
#[cfg(test)]
mod tests {
    use super::*

    #[test]
    fn test_option() {
        let x = Option::Some(5)
        assert_eq!(x.map(|n| n * 2), Option::Some(10))
    }

    #[test]
    fn test_result() {
        let x: Result[i32, &str] = Result::Ok(5)
        assert_eq!(x.map(|n| n * 2), Result::Ok(10))
    }

    #[test]
    fn test_vectors() {
        let v1 = Vec3::new(1, 2, 3)
        let v2 = Vec3::new(4, 5, 6)
        let cross = v1.cross(v2)
        assert_eq!(cross.x, -3)
        assert_eq!(cross.y, 6)
        assert_eq!(cross.z, -3)
    }
}
